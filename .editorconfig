# ----------------------------------------------------------------------------
# .editorconfig
# ----------------------------------------------------------------------------
# MME .NET Code Style v0.7.5 2017-08-19T14:55:00+02
# ----------------------------------------------------------------------------
# https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/
# http://editorconfig.org/
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md#c-coding-style
# https://github.com/dotnet/codeformatter

# Top-most EditorConfig file
root = true

# *** All Files ***
[*]
# Windows format
end_of_line = crlf
# Remove any whitespace preceding newline characters
trim_trailing_whitespace = true
# A newline ending every file
insert_final_newline = true

# *** Code files ***
[*.{cs,csx,vb,vbx,xaml,htm,html,xml}]
# Indentation
indent_style = space
indent_size = 4

# *** .NET Code Style Settings ***
[*.{cs,csx,vb,vbx}]
# *** Language Conventions ***
# This and Me
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion
# Language keywords vs. framework type names
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = false:suggestion
# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
# *** .NET Formatting Settings
# Note: only "true" or "false" (and some exceptions)
# Organize usings
dotnet_sort_system_directives_first = true
# *** Naming conventions ***
# Async methods must end in ...Async
dotnet_naming_rule.async_methods_end_in_async.symbols = any_async_methods
dotnet_naming_rule.async_methods_end_in_async.style = end_in_async
dotnet_naming_rule.async_methods_end_in_async.severity = suggestion
dotnet_naming_symbols.any_async_methods.applicable_kinds = method
dotnet_naming_symbols.any_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.any_async_methods.required_modifiers = async
dotnet_naming_style.end_in_async.required_suffix = Async
dotnet_naming_style.end_in_async.capitalization = pascal_case
# Non-public fields must begin with _ and be camel-case
dotnet_naming_rule.nonpublic_fields_begin_with_underscore.symbols = any_nonpublic_field
dotnet_naming_rule.nonpublic_fields_begin_with_underscore.style = begin_with_underscore
dotnet_naming_rule.nonpublic_fields_begin_with_underscore.severity = suggestion
dotnet_naming_symbols.any_nonpublic_field.applicable_kinds = field, event
dotnet_naming_symbols.any_nonpublic_field.applicable_accessibilities = private, protected, internal, protected_internal
dotnet_naming_style.begin_with_underscore.required_prefix = _
dotnet_naming_style.begin_with_underscore.capitalization = camel_case
# Kudos to Nuget client
; Naming styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case
; Naming rule: Interfaces must be pascal-cased prefixed with I
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *
dotnet_naming_rule.interfaces_rule.severity = warning
dotnet_naming_rule.interfaces_rule.symbols  = interface_symbols
dotnet_naming_rule.interfaces_rule.style = interface_style
; Naming rule: All methods and properties must be pascal-cased
dotnet_naming_symbols.method_and_property_symbols.applicable_kinds = method, property, class, struct, enum:property
dotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *
dotnet_naming_rule.methods_and_properties_rule.severity = warning
dotnet_naming_rule.methods_and_properties_rule.symbols  = method_and_property_symbols
dotnet_naming_rule.methods_and_properties_rule.style = pascal_case_style
; Naming rule: Static fields must be pascal-cased
dotnet_naming_symbols.static_member_symbols.applicable_kinds = field
dotnet_naming_symbols.static_member_symbols.applicable_accessibilities = *
dotnet_naming_symbols.static_member_symbols.required_modifiers = static
dotnet_naming_symbols.const_member_symbols.applicable_kinds = field
dotnet_naming_symbols.const_member_symbols.applicable_accessibilities = *
dotnet_naming_symbols.const_member_symbols.required_modifiers = const
dotnet_naming_rule.static_fields_rule.severity = warning
dotnet_naming_rule.static_fields_rule.symbols  = static_member_symbols
dotnet_naming_rule.static_fields_rule.style = pascal_case_style
; Naming rule: Private members must be camel-cased and prefixed with underscore
dotnet_naming_style.private_member_style.capitalization = camel_case
dotnet_naming_style.private_member_style.required_prefix = _
dotnet_naming_symbols.private_field_symbols.applicable_kinds = field, event
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities = private, protected, internal
dotnet_naming_rule.private_field_rule.severity = warning
dotnet_naming_rule.private_field_rule.symbols  = private_field_symbols
dotnet_naming_rule.private_field_rule.style = private_member_style

# *** CSharp Code Style Settings ***
[*.{cs,csx}]
# *** Language Conventions ***
# Var
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
# Expression-bodied members
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
# Inlined variable declarations
csharp_style_inlined_variable_declaration = true:suggestion
# Simplify default expressions
csharp_prefer_simple_default_expression = true:suggestion
# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
# Code block preferences
csharp_prefer_braces = true:warning
# *** C# Formatting Settings
# Note: only "true" or "false" (and some exceptions)
# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_within_query_expression_clauses = true
# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less
# Spacing options
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false
# Wrapping options
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# Pro-tip: The gray dots that indicate a suggestion are rather drab.
# To spice up your life, try changing them to a pleasant pink.
# To do so, go to "Tools > Options > Environment > Fonts and
# Colors > Suggestion ellipses (â€¦)" and give the setting the following
# custom color (R:255, G:136, B:196): #FF88C4

# Custom naming convention support is not yet supported with EditorConfig,
# but you can still use the rules available in
# "Tools > Options > Text Editor > C# >Code Style > Naming".
# View our progress on this feature on the
# [Roslyn repo](https://github.com/dotnet/roslyn/pull/15065).
